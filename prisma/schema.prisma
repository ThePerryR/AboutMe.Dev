// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

model Project {
    id     Int      @id @default(autoincrement())
    name   String?
    url    String?
    image  String?
    status String?
    headline String?
    description String? @db.Text
    isFavorited Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    skills    Skill[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([createdById])
}

model Experience {
    id     Int      @id @default(autoincrement())
    role  String?
    description String? @db.Text
    startDate DateTime?
    endDate DateTime?
    company String?
    companyLogo String?
    isCurrent Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([createdById])
}

model Skill {
    id     Int      @id @default(autoincrement())
    name   String?
    image  String?
    type   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    users    UserSkill[]
    projects Project[]
}

model Interest {
    id     Int      @id @default(autoincrement())
    name   String?
    image  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    users    User[]
}

model UserSkill {
    id     Int      @id @default(autoincrement())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    primary Boolean @default(false)

    user   User   @relation(fields: [userId], references: [id])
    userId String

    skill  Skill  @relation(fields: [skillId], references: [id])
    skillId Int

    @@index([userId])
    @@index([skillId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    refresh_token_expires_in Int?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    username      String? @unique
    name          String?
    email         String?   @unique
    emailVerified   DateTime?
    image           String?
    hireable        Boolean  @default(false)
    headline        String?
    twitterUsername String?
    linkedinUsername String?
    website         String?
    githubCreatedAt DateTime?
    region          String?
    location        String?
    nationalityEmoji String?
    statusEmoji     String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    projects      Project[]
    experiences   Experience[]
    skills        UserSkill[]
    interests     Interest[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
